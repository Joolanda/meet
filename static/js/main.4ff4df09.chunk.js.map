{"version":3,"sources":["Event.js","EventList.js","CitySearch.js","App.js","serviceWorker.js","index.js"],"names":["Event","state","showdetails","className","this","props","event","summary","dateTime","timeZone","Component","EventList","events","map","key","id","CitySearch","locations","location","query","suggestions","handleInputChanged","value","target","setState","handleItemClicked","type","onChange","suggestion","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sNA4BeA,G,kNAxBbC,MAAQ,CACNC,aAAa,G,uDAMb,OACA,yBAAKC,UAAU,SACb,yBAAKA,UAAU,kBACf,gCAAMC,KAAKC,MAAMC,MAAMC,UAEvB,uBAAGJ,UAAU,4BAA4BC,KAAKC,MAAMC,MAAME,UAC1D,uBAAGL,UAAU,4BAA4BC,KAAKC,MAAMC,MAAMG,UAC1D,4BACEN,UAAU,eADZ,qB,GAfcO,cCgBLC,E,4MAfbV,MAAQ,CACNW,OAAQ,I,uDAGR,OACE,wBAAIT,UAAU,aACbC,KAAKH,MAAMW,OAAOC,KAAI,SAAAP,GAAK,OAC1B,wBAAIQ,IAAKR,EAAMS,IACb,kBAAC,EAAD,CAAOT,MAAOA,a,GATAI,aCsCTM,G,iNApCbf,MAAQ,CACNgB,UAAW,EAAKZ,MAAMa,SACtBC,MAAO,iBACPC,YAAa,I,EAGfC,mBAAqB,SAACf,GACpB,IAAMgB,EAAQhB,EAAMiB,OAAOD,MAC3B,EAAKE,SAAS,CAAEL,MAAOG,K,EAEzBG,kBAAoB,SAACH,GACnB,EAAKE,SAAS,CAAEL,MAAOG,K,uDAGf,IAAD,OACP,OACE,yBAAKnB,UAAU,cACb,yCACA,wDACA,2BACIuB,KAAK,OACLvB,UAAU,OACVmB,MAAOlB,KAAKH,MAAMkB,MAClBQ,SAAUvB,KAAKiB,qBAEnB,wBAAIlB,UAAU,eACXC,KAAKH,MAAMmB,YAAYP,KAAI,SAACe,GAAD,OAC1B,wBAAId,IAAKc,GAAT,YAA8B,kBAAM,EAAKH,kBAAkBG,e,GA5B9ClB,cCcVmB,E,uKAVX,OACE,yBAAM1B,UAAU,OACd,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANUO,aCMEoB,QACW,cAA7BC,OAAOb,SAASc,UAEe,UAA7BD,OAAOb,SAASc,UAEhBD,OAAOb,SAASc,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.4ff4df09.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { mockData } from'./mock-data';\n\nclass Event extends Component {\n  state = {\n    showdetails: false,\n  };\n\n\n\n  render() {\n    return (\n    <div className=\"Event\">\n      <div className=\"event__summary\">\n      <h1> {this.props.event.summary}</h1>\n      </div>\n      <p className=\"event__summary--dateTime\">{this.props.event.dateTime}</p>\n      <p className=\"event__summary--timeZone\">{this.props.event.timeZone}</p>\n      <button\n        className='details-btn'> \n        show details\n      </button>\n      </div>\n\n    );\n  }\n}\n\nexport default Event;","import React, { Component } from 'react';\nimport Event from './Event';\n\nclass EventList extends Component {\n  state = {\n    events: [],\n  }\n  render() {\n    return (\n      <ul className=\"EventList\"> \n      {this.state.events.map(event =>\n        <li key={event.id}>\n          <Event event={event} />\n        </li>)}\n      </ul>\n    );\n  }\n}\n\nexport default EventList;","import React, { Component } from 'react';\nimport { extractLocations } from './api';\nimport { mockData } from './mock-data';\n\nclass CitySearch extends Component {\n  state = {\n    locations: this.props.location,\n    query: 'Berlin, German', \n    suggestions: []\n  }\n\n  handleInputChanged = (event) => {\n    const value = event.target.value;\n    this.setState({ query: value });\n  }\n  handleItemClicked = (value) => {\n    this.setState({ query: value });\n  }\n\n  render() {\n    return (\n      <div className=\"CitySearch\">\n        <h1> Meet App</h1>\n        <h3>Choose your nearest city</h3>\n        <input\n            type=\"text\"\n            className=\"city\"\n            value={this.state.query}\n            onChange={this.handleInputChanged}\n        />\n        <ul className=\"suggestions\">\n          {this.state.suggestions.map((suggestion) => (\n            <li key={suggestion}>onClick={() => this.handleItemClicked(suggestion)}</li>\n          ))}\n        </ul>\n       </div>\n\n    );\n  }\n}\n\nexport default CitySearch;","import React, { Component } from 'react';\nimport './App.css';\nimport EventList from './EventList';\nimport CitySearch from './CitySearch';\nimport Event from './Event';\n\nclass App extends Component {\n  render() {\n    return (\n      < div className=\"App\">\n        <CitySearch />\n        <EventList />\n        <Event />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}